sqlalchemy:
1. imports and base class
from sqlalchemy import create_engine, ForeignKey, Column, String, Integer, CHAR
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker


create_engine -> creates a connection to database
ForeignKey -> defines foreign key relationships between tables
Column, String, Integer, CHAR -> Used to define columns and their datatypes
sessionmaker -> provides a factory for sessions

2. Base = declarative_base()
	base class keeps track of all class and tables that are mapped 

3. class definition - define the model (mapping a table to a class)
class Person(Base):
     __tablename__ = "people"

The class Person represents a table in the database. The table is named "people".
The class inherits from Base, meaning it will be treated as a database model.
Inside the class, each attribute corresponds to a column in the table:


4. Eg:     
    ssn = Column("ssn", Integer, primary_key=True)
    firstname = Column("firstname", String)
    lastname = Column("lastname", String)
    gender = Column("gender", CHAR)
    age = Column("age", Integer)

5. __init__ method is used to initialize the object:

    def __init__(self, ssn, first, last, gender, age):
        self.ssn = ssn
        self.firstname = first
        self.lastname = last
        self.gender = gender
        self.age = age
6. __repr__ method is used to print a human readable representation of the object
def __repr__(self):
        return f"({self.ssn}) {self.firstname} {self.lastname} ({self.gender}, {self.age})"

7. create the database:
	# engine = acts as interface to the database
	engine = create_engine("sqlite:///mydb.db", echo=True)

8. This line creates all the tables in the database according to the class definitions that inherit from Base. In this case, it will create a table named "people" with the defined columns.
	Base.metadata.create_all(bind=engine)

9. create a session:
	Session = sessionmaker(bind=engine)
	session = Session()

sessionmaker: Creates a session factory bound to the engine (which connects to the database).
session: An actual session that is used to interact with the database (add, update, delete, query).


10. insert data into the table
	p = Person(18, 'Sam', 'Smith', 'M', 16)
	session.add(p)
	session.commit()


Summary
Define a model: The Person class is a model for the people table.
Create a database engine: create_engine creates a connection to the database.
Create a session: Sessions are used to interact with the database.
Insert records: Create objects for each person and add them to the session. Committing the session saves the changes to the database.
